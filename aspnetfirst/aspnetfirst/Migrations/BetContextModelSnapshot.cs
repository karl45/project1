// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using aspnetfirst.Data;

namespace aspnetfirst.Migrations
{
    [DbContext(typeof(BetContext))]
    partial class BetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("aspnetfirst.Models.Coach", b =>
                {
                    b.Property<int>("CoachId");

                    b.Property<string>("CoachName")
                        .IsRequired();

                    b.Property<int>("Rate");

                    b.HasKey("CoachId");

                    b.ToTable("Coach");

                    b.HasData(
                        new { CoachId = 1, CoachName = "Juze", Rate = 95 },
                        new { CoachId = 2, CoachName = "Morris", Rate = 88 },
                        new { CoachId = 3, CoachName = "Philippo", Rate = 96 }
                    );
                });

            modelBuilder.Entity("aspnetfirst.Models.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LeaugueName")
                        .IsRequired();

                    b.HasKey("LeagueId");

                    b.ToTable("League");

                    b.HasData(
                        new { LeagueId = 1, LeaugueName = "Italy" },
                        new { LeagueId = 2, LeaugueName = "Spain" }
                    );
                });

            modelBuilder.Entity("aspnetfirst.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Team_guestId");

                    b.Property<int>("Team_homeId");

                    b.HasKey("MatchId");

                    b.HasIndex("Team_guestId");

                    b.HasIndex("Team_homeId");

                    b.ToTable("Match");

                    b.HasData(
                        new { MatchId = 1, Team_guestId = 2, Team_homeId = 1 },
                        new { MatchId = 2, Team_guestId = 1, Team_homeId = 3 }
                    );
                });

            modelBuilder.Entity("aspnetfirst.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Deffence");

                    b.Property<int>("Offence");

                    b.Property<string>("PlayerName");

                    b.Property<int>("TeamId");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");

                    b.HasData(
                        new { PlayerId = 1, Deffence = 48, Offence = 95, PlayerName = "Ronaldo", TeamId = 1 },
                        new { PlayerId = 2, Deffence = 56, Offence = 85, PlayerName = "Kaka", TeamId = 2 }
                    );
                });

            modelBuilder.Entity("aspnetfirst.Models.ScoreStatistic", b =>
                {
                    b.Property<int>("ScoreStatisticId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MatchId");

                    b.Property<int>("Numberofpenalty");

                    b.Property<int>("Numberofredcard");

                    b.Property<int>("NumberofyellowCard");

                    b.Property<string>("Score");

                    b.HasKey("ScoreStatisticId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("ScoreStatistic");

                    b.HasData(
                        new { ScoreStatisticId = 1, MatchId = 1, Numberofpenalty = 13, Numberofredcard = 3, NumberofyellowCard = 5, Score = "2-0" },
                        new { ScoreStatisticId = 2, MatchId = 2, Numberofpenalty = 15, Numberofredcard = 2, NumberofyellowCard = 6, Score = "3-2" }
                    );
                });

            modelBuilder.Entity("aspnetfirst.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CoachId");

                    b.Property<int>("LeagueId");

                    b.Property<string>("TeamName");

                    b.Property<int>("TeamRate");

                    b.HasKey("TeamId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Team");

                    b.HasData(
                        new { TeamId = 1, CoachId = 1, LeagueId = 1, TeamName = "Juventus", TeamRate = 98 },
                        new { TeamId = 2, CoachId = 2, LeagueId = 1, TeamName = "Milan", TeamRate = 85 },
                        new { TeamId = 3, CoachId = 3, LeagueId = 1, TeamName = "Inter", TeamRate = 78 }
                    );
                });

            modelBuilder.Entity("aspnetfirst.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Points");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserPassword");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "1", AccessFailedCount = 0, ConcurrencyStamp = "79fe89ed-748c-44ef-9688-db78c13060fb", EmailConfirmed = false, LockoutEnabled = false, PhoneNumberConfirmed = false, Points = 100, TwoFactorEnabled = false, UserName = "Ali", UserPassword = "AliPass" },
                        new { Id = "2", AccessFailedCount = 0, ConcurrencyStamp = "8862ee6d-5f22-40a9-b21d-f493498a6bf9", EmailConfirmed = false, LockoutEnabled = false, PhoneNumberConfirmed = false, Points = 80, TwoFactorEnabled = false, UserName = "Dias", UserPassword = "seniorhacka" }
                    );
                });

            modelBuilder.Entity("aspnetfirst.Models.UserMatch", b =>
                {
                    b.Property<int>("MatchId");

                    b.Property<string>("UserId");

                    b.Property<int>("UserMatchId");

                    b.HasKey("MatchId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMatch");

                    b.HasData(
                        new { MatchId = 1, UserId = "1", UserMatchId = 1 },
                        new { MatchId = 2, UserId = "2", UserMatchId = 2 },
                        new { MatchId = 2, UserId = "1", UserMatchId = 3 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "988fbdb9-dfa5-457e-8ee1-5c53152b74eb", ConcurrencyStamp = "c8891e9e-64b0-4e85-9996-09ddc2754f3a", Name = "admin" },
                        new { Id = "184c0727-3f3c-4246-a68c-b44340d1161a", ConcurrencyStamp = "5e455ec3-4a6c-4395-a57c-5750b484f144", Name = "user" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("aspnetfirst.Models.Coach", b =>
                {
                    b.HasOne("aspnetfirst.Models.Team", "Team")
                        .WithOne("Coach")
                        .HasForeignKey("aspnetfirst.Models.Coach", "CoachId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("aspnetfirst.Models.Match", b =>
                {
                    b.HasOne("aspnetfirst.Models.Team", "Team_guest")
                        .WithMany()
                        .HasForeignKey("Team_guestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("aspnetfirst.Models.Team", "Team_home")
                        .WithMany()
                        .HasForeignKey("Team_homeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("aspnetfirst.Models.Player", b =>
                {
                    b.HasOne("aspnetfirst.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("aspnetfirst.Models.ScoreStatistic", b =>
                {
                    b.HasOne("aspnetfirst.Models.Match", "Match")
                        .WithOne("ScoreStatistic")
                        .HasForeignKey("aspnetfirst.Models.ScoreStatistic", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("aspnetfirst.Models.Team", b =>
                {
                    b.HasOne("aspnetfirst.Models.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("aspnetfirst.Models.UserMatch", b =>
                {
                    b.HasOne("aspnetfirst.Models.Match", "Match")
                        .WithMany("UserMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("aspnetfirst.Models.User", "User")
                        .WithMany("UserMatches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("aspnetfirst.Models.User")
                        .WithMany("identityRoles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("aspnetfirst.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("aspnetfirst.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("aspnetfirst.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("aspnetfirst.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
